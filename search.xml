<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[nginx的简单使用]]></title>
    <url>%2Fweb%2Fnginx%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[table th:first-of-type { width: 20%; } 操作指令语法1nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives] 选项 选项 描述 -?,-h 查看帮助信息 -v 显示版本信息 -V 显示版本信息和配置选项 -t 测试配置 -T 测试配置并转存 -q 测试配置时屏蔽非错误信息 -s signal 发送信号给master进程，信号有：stop（立即停止）、quit（优雅退出）、reopen（重启）、reload（重新加载配置） -p prefix 设置文件路劲前缀(默认: /usr/local/nginx/) -c filename 设置配置文件(默认: conf/nginx.conf) -g directives 设置配置文件外的全局指令 这里比较值得注意的，就是 1./nginx -s reload 当我们修改配置文件后，不用关闭Nginx，直接执行上面那条指令，无需重启，就可以让配置文件生效，所以Nginx是支持热启动的。 常用功能Nginx可以为我们提供一些常用的基础功能： 处理静态资源 反向代理 负载均衡 虚拟主机 下面来一一说明这些功能的简单配置： 静态资源配置访问静态资源很简单，只要通过root配置好静态资源根目录即可： 1234567server &#123; listen 80; # 服务监听的端口 location / &#123; root html; # 静态资源根目录 &#125;&#125; 反向代理反向代理与静态资源类似，只要通过proxy_pass指定具体应用服务器即可： 1234567server &#123; listen 80; location / &#123; proxy_pass http://127.0.0.1:8080; # 应用服务器地址 &#125;&#125; 负载均衡负载均衡核心配置为upstream，然后通过反向代理去请求负载均衡服务： 12345678910111213# 负载均衡核心配置upstream backend_server &#123; server 127.0.0.1:8080; server 127.0.0.1:8081; server 127.0.0.1:8082;&#125;server &#123; listen 80; location / &#123; proxy_pass http://backend_server; &#125;&#125; 虚拟主机所谓的虚拟主机，其实就是配置多个反向代理服务。使得实际一台机器却提供了多个应用服务的功能。在建站初期，网站访问量小，可以这么做，用于节省成本，但是一旦访问量增大，就不建议了。 1234567891011121314151617server &#123; listen 80; server_name www.aaa.com; location / &#123; proxy_pass http://127.0.0.1:8080; &#125;&#125;server &#123; listen 80; server_name www.bbb.com; location / &#123; proxy_pass http://127.0.0.1:8081; &#125;&#125; Http服务通过上面Nginx的几项基本功能的组合，便可以搭建出一个负载均衡的动静分离的HTTP服务，以下是一个简单示例： 123456789101112131415161718upstream backend_server &#123; server 127.0.0.1:8080; server 127.0.0.1:8081; server 127.0.0.1:8082;&#125;server &#123; listen 80; server_name www.abc.com; location / &#123; root /home/com/abc; &#125; location ~ \.(do|action)$ &#123; proxy_pass http://backend_server; &#125;&#125; Nginx的配置很灵活，很强大，如何去使用需要看具体的应用场景的需要。Nginx暂时在工作中还没怎么用到过，希望日后能多去尝试，在使用中得到更好的理解和提高。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>java</tag>
        <tag>Nginx</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初探nginx]]></title>
    <url>%2Fweb%2F%E5%88%9D%E6%8E%A2nginx%2F</url>
    <content type="text"><![CDATA[Nginx 简介Nginx 是什么Nginx是一款轻量级的Web服务器、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。其特点主要是占用内存小，并发能力强。 Nginx 可用来做什么 处理静态资源 反向代理 负载均衡 虚拟主机 为什么要用 Nginx 由于互联网行业的快速发展，对服务器并发能力的要求越来越高。传统Apache服务器，在高并发的情况下，需要消耗大量的内存，导致Http请求的平均响应速度降低。而Nginx采用C进行编写，选择了epoll and kqueue作为开发模型，能够支持高并发的同时，保持着非常低的CPU与内存占用率。所以，大势所趋，Nginx就火了起来。 Nginx 的安装Nginx 依赖Nginx需要依赖以下三个类库： zlib // gzip模块需要 pcre // rewrite模块需要 openssl // ssl功能需要 在Nginx安装之前要确保以上三个类库的正确安装 Nginx 下载与安装Nginx的整个下载安装过程十分的简单、常规。Nginx的安装包下载很简单，找到下载地址，直接wget下来就好： 1wget http://nginx.org/download/nginx-1.12.2.tar.gz 然后就是解压安装包 1tar -zxvf nginx-1.12.2.tar.gz 后面就是常规编译安装步骤 1234cd nginx-1.12.2./configuremakemake install 这样整个安装就已经完成了。安装好后的Nginx在 /usr/local/ 目录下整个目录结构如下： 1234567891011121314151617181920212223nginx/|-- conf| |-- fastcgi.conf| |-- fastcgi.conf.default| |-- fastcgi_params| |-- fastcgi_params.default| |-- koi-utf| |-- koi-win| |-- mime.types| |-- mime.types.default| |-- nginx.conf| |-- nginx.conf.default| |-- scgi_params| |-- scgi_params.default| |-- uwsgi_params| |-- uwsgi_params.default| `-- win-utf|-- html| |-- 50x.html| `-- index.html|-- logs`-- sbin `-- nginx 安装验证接下来可以来验证下安装是否成功：12cd /usr/local/nginx/sbin/./nginx -t 当出现如下提示，则表示安装成功 12nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful Nginx 的启停启动可以通过一下指令启动Nginx 1./nginx 然后通过 1ps -ef | grep nginx 查询Nginx进程，则可以看到有master和work两个进程，如下： 123root 3660 1 0 20:24 ? 00:00:00 nginx: master process ./nginxnobody 3661 3660 0 20:24 ? 00:00:00 nginx: worker processroot 3663 1118 0 20:24 pts/0 00:00:00 grep nginx 关闭关闭Nginx方式简单来说有两种 直接杀进程 结束命令 直接杀进程的话，要注意得先杀 master进程，再杀work进程： 12kill 3660kill 3661 结束命令有两种 12./nginx -s stop // 快速停止nginx./nginx -s quit // 完整有序的停止nginx]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>java</tag>
        <tag>Nginx</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux常用命令]]></title>
    <url>%2Flinux%2Flinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[table th:first-of-type { width: 20%; } 本文主要用来收集整理日常工作中常用的linux命令。所以会随着工作持续更新。暂时把印象中常用的命令列了出来，后续会慢慢完善其中内容。 manman即manual，是Linux下的帮助指令，通过man命令可以查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。查看指令帮助时，可以使用方向键上下移动一行，也可使用PageUp或PageDown进行上下翻页，退出查看的话按下q即可。 语法1man (选项) (参数) 选项 选项 描述 -a 在所有的man帮助手册中搜索 -f 等价于whatis指令，显示给定关键字的简短描述信息 -P 指定内容时使用分页程序 -M 指定man手册搜索的路径 参数 数字：指定从哪本man手册中搜索帮助； 关键字：指定要搜索帮助的关键字。 总结感觉man命令的选项和参数应用的都不是很多，一般使用时都是直接1man [指令] 例如：1man man 就可以用来查看man指令帮助信息。 datedate命令是显示或设置系统时间与日期。 语法1date (选项) (参数) 选项 选项 描述 -d&lt;字符串&gt; 显示字符串所指的日期与时间。字符串前后必须加上双引号 -s&lt;字符串&gt; 根据字符串来设置日期与时间。字符串前后必须加上双引号 -u 显示GMT --help 在线帮助 --version 显示版本信息 参数 &lt;+时间日期格式&gt;：指定显示时使用的日期时间格式，有空格的话需要加上双引号（””）。 日期格式通配符列表 通配符 描述 %H 小时，24小时制（00~23） %I 小时，12小时制（01~12） %k 小时，24小时制（0~23） %l 小时，12小时制（1~12） %M 分钟（00~59） %p 显示出AM或PM %r 显示时间，12小时制（hh:mm:ss %p） %s 从1970年1月1日00:00:00到目前经历的秒数 %S 显示秒（00~59） %T 显示时间，24小时制（hh:mm:ss） %X 显示时间的格式（%H:%M:%S） %Z 显示时区，日期域（CST） %a 星期的简称（Sun~Sat） %A 星期的全称（Sunday~Saturday） %h,%b 月的简称（Jan~Dec） %B 月的全称（January~December） %c 日期和时间（Tue Nov 20 14:12:58 2012） %d 一个月的第几天（01~31） %x,%D 日期（mm/dd/yy） %j 一年的第几天（001~366） %m 月份（01~12） %w 一个星期的第几天（0代表星期天） %W 一年的第几个星期（00~53，星期一为第一天） %y 年的最后两个数字（1999则是99） %Y 年份的全数字 总结date命令因为有很多通配符的支持，使得使用起来非常的灵活。不过常用的还是下面三种形式 123date // 直接查看当前时间date &quot;+%Y-%m-%d %H:%M:%S&quot; // 格式化输出当前时间date -s &quot;2018-10-18 20:00&quot; // 设置当前时间 值得注意的是只有root用户才能设置系统时间，其他用户只能查看，不能设置。另外比较有意思的就是date命令中时间可以有加减操作 1234date -d &quot;-1 day&quot; // 显示1天前date -d &quot;+1 day&quot; // 显示1天后date -s &quot;-1 year&quot; // 设置当前时间为1年前date -s &quot;+1 year&quot; // 设置当前时间为1天后 pwdpwd即print work dictionary，以绝对路径的方式显示用户当前工作目录。 语法1pwd（选项） 选项 选项 描述 --help 显示帮助信息 --version 显示版本信息 总结pwd命令基本上是可以说是最基础的命令了，而且只能用来查看当前工作目录的绝对路径，没过多的选项参数支持，使用时直接单独使用就好。1pwd cdcd即change dictionary，cd命令用来切换工作目录至指定路径，该路劲可以是绝对路劲也可以是相对路劲。 语法1cd (选项) (参数) 选项 选项 描述 -p 如果要切换到的目标目录是一个符号连接，直接切换到符号连接指向的目标目录 -L 如果要切换的目标目录是一个符号的连接，直接切换到字符连接名代表的目录，而非符号连接所指向的目标目录。 - 当仅实用”-“一个选项时，当前工作目录将被切换到环境变量”OLDPWD”所表示的目录 参数 &lt;目标目录&gt;，绝对路劲和相对路径均可以。 总结cd命令是经常使用的命令，使用起来很简单，主要理解绝对路径和相对路径即可。另外有几个比较特殊的用法 123cd - // 返回之前所在的目录cd ~ // 进入用户的主目录，即登录时所在的目录。cd // 等同于cd ~ lsls即list directory contents，ls命令用来显示目标列表。 语法1ls (选项) (参数) 选项 选项 描述 -a 显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出） -A 显示除影藏文件“.”和“..”以外的所有文件列表 -C 多列显示输出结果。这是默认选项 -l 与“-C”选项功能相反，所有输出信息用长格式输出，不输出为多列 -F 在每个输出项后追加文件的类型标识符，具体含义：“*”表示具有可执行权限的普通文件，“/”表示目录，“@”表示符号链接，“&#124;”表示命令管道FIFO，“=”表示sockets套接字。当文件为普通文件时，不输出任何标识符 -b 将文件中的不可输出的字符以反斜线“”加字符编码的方式输出 -c 与“-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“-l”选项连用时，则排序的依据是文件名称，另外还按ctime排序 -d 仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表 -f 此参数的效果和同时指定“-aU”参数相同，并关闭“-ls –color”参数的效果 -h 以方便人们阅读的方式展示文件大小 -i 显示文件索引节点号（inode）。一个索引节点代表一个文件 --file-type 与“-F”选项的功能相同，但是不显示“*” -k 以KB（千字节）为单位显示文件大小 -l 以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等 -m 用“,”号区隔每个文件和目录的名称 -n 以用户识别码和群组识别码替代其名称 -r 以文件名反序排列并输出目录内容列表 -s 显示文件和目录的大小，以区块为单位 -S 按文件大小排序 -t 用文件和目录的更改时间排序 -L 如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录 -R 递归处理，将指定目录下的所有文件及子目录一并处理 -u 与“-lt”选项连用时，按访问时间排序并展示，与“-l”选项连用时，则按名称以及访问时间同时排序 -U 不做排序，按照存放在目录中的顺序展示 --full-time 列出完整的日期与时间 --color[=WHEN] 使用不同的颜色高亮显示不同类型的。 参数 &lt;目录|文件&gt;，指定要显示列表的目录，也可以是具体的文件，绝对路劲相对路径均可以，也可以匹配通配符。 总结ls是Linux中常用的命令，通常用来查看当前目录下的文件直接使用ls命令即可，因为ls默认参数是当前目录的相对路径。即 1ls // 等同于 ls . 为了方便查看，经常需要每个文件单独显示一行，并显示文件的简要信息可以使用 1ls -l 此时展示的文件大小单位很单一，仅为byte，阅读起来很不方便，可以通过使用“-lh”来展示阅读的友好单位 1ls -lh 有时需要只显示部分文件则可以使用通配符去做过滤 1ls *.txt // 只当前目录下显示以.txt结尾的文件 有时需要对显示文件进行排序（默认排序均为倒序，加上-r以后可以改为升序） 1234567ls -clt // 按ctime进行倒序排序ls -ult // 按访问时间倒序排序ls -lS // 按照文件大小倒序排序ls -cltr // 按ctime进行升序排序ls -ultr // 按访问时间升序排序ls -lSr // 按照文件大小升序排序 有时仅需要展示目录信息，不需要展示目录内文件的信息，尤其目录内文件特别多的时候展示目录内各文件名称（信息）会很浪费时间 1ls -ld touchtouch命令用来更新文件的时间戳（默认修改为当前时间），如果文件不存在的话，则会创建该文件。 语法1touch (选项) (参数) 选项 选项 描述 -a 仅仅更新文件访问时间 -c, --no-create 不创建任何文件 -d, --date=STRING 使用指定的时间而非当前时间 -m 仅仅更新文件修改时间 -r, --reference=FILE 指定参考文件，按照参考文件更新文件的时间戳 -t 使用指定时间而非当前时间，时间格式为：[[CC]YY]MMDDhhmm[.ss] --time=WORD 指定要修改的时间戳，--time=access或–time=atime等同于-a，--time=modify或--time=mtime等同于-m --help 帮助文档 --version 显示版本信息 参数 文件列表：待更新时间戳的文件列表（即可以同时更新多个文件） 总结touch命令可以更新文件的访问时间和修改时间，默认情况会把两者都更新为系统当前时间，选项支持我们灵活的去更新时间戳。不过在我平常工作中感觉用的不多，很少碰到需要更新文件时间戳的情况，创建文件的话一般直接使用vim命令去创建并编辑了。touch命创建文件的优势就在于可以同时创建多个文件了。 dos2unixdos2unix命令用来将DOS格式的文本文件转换成UNIX格式的。 语法1dos2unix [-kq] [-c convmode] [-o file ...] [-n infile outfile ...] 选项 选项 描述 -h,--help 在线帮助文档 -k,--keepdate 保持输出文件时间戳不变 -q,--quiet 安静模式，不提示任何警告信息 -V,--version 显示版本信息 -c,--convmode 设置转换模式，转换模式共有: ASCII, 7bit, ISO, Mac，默认为ASCII -o,--oldfile file … 源文件模式，将转换过得文件内容输出到源文件道中。程序默认使用这一种模式，且支持通配符 -n,--newfile in out … 新文件模式，将源文件转化后文件内容输出到新文件道中。文件名必须成对出现。不要使用通配符，不然可能会丢失文件 参数 -c &lt;ASCII|7bit|ISO|Mac&gt;：指定转换模式，默认为ASCII -o &lt;文件列表&gt;：需要转换文件格式的文件列表 -n &lt;源文件 新文件 [源文件 新文件 …]&gt;：新文件模式下的源文件新文件对。 总结dos2unix命令本身很简单，就是用来转换文本文件的，主要是由于DOS文件系统下文件换行为\n\r，而unix文件系统下换行为\n，很多命令在处理文件的时候不能很好的处理DOS文本文件。dos2unix命令日常工作中使用频率还是挺高的，毕竟大部分情况下时windows下开发，在windows中编写好的文本，传到服务器上后则需要执行此命令，尤其是shell脚本这一类，不然脚本根本执行不了。 使用起来也很简单，因为指令的默认设置，所以如果只是想将某DOS文件直接转换位UNIX文件，直接 1dos2unix file 可以同时转化多个文件，空格隔开就好 1dos2unix file1 file2 file3 有些时候不想改变文件的时间戳，加上-k即可 1dos2unix -k file1 file2 file3 需要设置转换模式的情况不多，默认转换格式为ASCII 1dos2unix -k -c 7bit file1 file2 file3 偶尔会需要保留源文件 1dos2unix -n old new 另外还有mac2unix和unix2dos这两个类似的命令，用法和dos2unix一致就不分别介绍了。 mkdirmkdir即make directories，用来创建目录，即平常windows下所看到的文件夹。 语法1mkdir (选项) (参数) 选项 选项 描述 -m,--mode=MODE 设置目录权限 -p,--parents 如果父目录不存在，则自动创建父目录 -v,--verbose 没创建一个文件输出一条通知消息 --help 查看帮助文档 --version 显示版本信息 参数 &lt;目录路劲列表&gt; ：要创建的目录列表，多个目录空格隔开。可以是绝对路径，也可以是相对路劲 总结mkdir命令功能很简单，目的很明确，就是用来创建目录的，基本上经常用到。 使用最多的情况基本上是直接跟上子目录名称来在当前目录下创建子目录 1mkdir name 当然，可以同时创建多个子目录 1mkdir child1 child2 有时候会通过绝对路劲去创建目录 1mkdir /home/hulyang/test 为了避免创建指定目录时父目录不存在而报错的情况，可以加上-p 来连同不存在的父目录一起创建 1mkdir -p /home/hulyang/parent/child cpmvrmziptarfilestatcatmorelessheadtailcutgrepwchistorypstopdf]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO指令回顾]]></title>
    <url>%2Fhexo%2FHEXO%E6%8C%87%E4%BB%A4%E5%9B%9E%E9%A1%BE%2F</url>
    <content type="text"><![CDATA[本文主要参考HEXO官方文档进行撰写，记录自己的建站过程，以供自己或他人在建站的作为简单参考。HEXO官网地址: https://hexo.io/ 回顾截止到本章节为止，已经使用了很多hexo指令了分别有： init generate server clean new deploy 这些指令基本上是hexo中比较常用的指令，本章会逐一介绍这些指令。 init指令1hexo init [folder] 用于新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 generate指令1hexo generate 也可简写为1hexo g 用于生成静态文件。静态文件存放在public文件夹下。 选项 描述 -d,–deploy 文件生成后立即部署网站 -w, –watch 监视文件变动 server指令1hexo server 也可简写为1hexo s 用于启动服务器。默认情况下，访问网址为：http://localhost:4000/。 选项 描述 -p, –port 重设端口 -s, –static 只使用静态文件 -l, –log 启动日记记录，使用覆盖记录格式 clean指令1hexo clean 该指令没有简写。用于清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 new指令1hexo new [layout] &lt;title&gt; 用于新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 deploy指令1hexo deploy 也可简写为1hexo d 用于部署网站。 参数 描述 -g, –generate 部署之前预先生成静态文件 其他hexo 还有很多其他的指令，例如: publish render migrate list . . . 这里就不一一列举了，有兴趣的话可以自行查看官方文档:https://hexo.io/zh-cn/docs/commands。]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO写作、主题及部署]]></title>
    <url>%2Fhexo%2FHEXO%E5%86%99%E4%BD%9C%E3%80%81%E4%B8%BB%E9%A2%98%E5%8F%8A%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[本文主要参考HEXO官方文档进行撰写，记录自己的建站过程，以供自己或他人在建站的作为简单参考。HEXO官网地址: https://hexo.io/ HEXO写作可以通过执行new指令来创建博文。1hexo new [layout] &lt;title&gt; 创建博文尝试执行以下命令，访问博文地址观察下效果。1234hexo new 我的第一篇博客hexo cleanhexo generatehexo server 是可以明显看到刚刚所创建的那篇博文的。当然文章只有标题，没有实际内容，实际内容需要自己去编辑。编辑的话需要找到具体文件所在位置。执行new指令后是会打印出具体文件位置的，上面指令将会在_post文件夹下自动生成一个我的第一篇博客.md的markdown文件，如下： 编辑博文熟悉markdown语法的话编辑起来很简单，markdown语法就不做具体介绍，需要自己去学习。可以尝试在文件中随便写点什么，然后刷新页面。编辑的内容是会立马生效的。 另外hexo提供了很多标签插件，详情可见:https://hexo.io/zh-cn/docs/tag-plugins。标签插件有很多，并且官方文档中有详实的例子，这里就简单举个图片的例子，在文档中加入下面这段 1&#123;% img https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1538144411674&amp;di=f3bab7ad765c8131bf9d18e9190b02db&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201603%2F17%2F20160317124201_jUnuR.jpeg [赤木晴子] %&#125; 然后再刷新界面就能看到刚刚的那张图片了。 HEXO主题hexo可以自定义主题，当然也有丰富的开源主题供我们使用，可以在https://hexo.io/themes/去浏览并找到自己喜欢的主题。下载自己喜欢的主题，然后放到themes文件夹内，然后修改站点配置中的theme配置即可。例如下载好了next主题，然后再在站点配置中修改theme12#theme: landscapetheme: next 然后关闭HEXO服务，重新执行以下命令来启动HEXO服务。123hexo cleanhexo generatehexo server 刷新界面，便可看到主题效果： 具体主题中的很多配置可以自行参考自己喜欢的主题的文档或是教程去自定义配置，每个主题都不尽相同。 HEXO部署部署配置部署之前必须先配置好站点配置中deploy相关信息：123deploy: type: // 类型 repo: // 仓库地址 部署类型主要支持：Git、Heroku、Rsync、OpenShift、FTPSync，各类型的依赖需要自己安装。 部署指令部署指令很简单：1hexo deploy github访问部署到github的话，程序会尝试自动检测。想要通过https://&lt;用户名&gt;.github.io来访问自己的博客的话，需要在自己账号下新增一个名称为&lt;用户名&gt;.github.io的代码仓库，然后通过配置deploy将博客部署至该仓库下：12345deploy: type: git // git类型 repo: https://github.com/&lt;用户名&gt;/&lt;用户名&gt;.github.io.git // 注意最后有个.git不能少 branch: master // 必须在master分支下 message: [message] // 这个自定义就好，可以不配置 另外需要修改站点配置中的URL：1234567# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;#url: http://yoursite.comurl: https://github.com/&lt;用户名&gt;/&lt;用户名&gt;.github.io // 将url修改为代码仓库地址、其他保持默认即可root: /permalink: :year/:month/:day/:title/permalink_defaults: 最后执行deploy指令1hexo deploy 便可通过https://&lt;用户名&gt;.github.io来访问自己的博客啦。]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO各文件作用及主要配置]]></title>
    <url>%2Fhexo%2FHEXO%E5%90%84%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[本文主要参考HEXO官方文档进行撰写，记录自己的建站过程，以供自己或他人在建站的作为简单参考。HEXO官网地址: https://hexo.io/ HEXO文件目录上篇博文中有提到HEXO文件目录结构如下： 12345678.├── _config.yml // 站点配置文件├── package.json // 应用程序的信息├── scaffolds // 模板文件夹├── source // 资源文件夹| ├── _drafts // 草稿| └── _posts // 博文└── themes // 主题文件夹 接下来对各文件及目录进行进一步介绍。 _config.yml站点配置文件，可以在此配置大部分的参数。具体配置中各参数会在后文中的站点配置中再做介绍。 package.json应用程序的信息，EJS, Stylus 和 Markdown renderer 已默认安装，可以自由移除。此部分信息不建议修改。1234567891011121314151617181920package.json&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; // 依赖信息 &quot;hexo&quot;: &quot;^3.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;, // EJS &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;, // Stylus &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;, // Markdown &quot;hexo-server&quot;: &quot;^0.1.2&quot; &#125;&#125; scaffolds模版文件夹。新建文章时，Hexo会根据scaffold来建立文件。文件夹内有以下三个模板：123draft.md // 创建草稿的模板page.md // 创建新页面的模板post.md // 创建新博文的模板 创建文件时，模板中的Front-matter内容会自动填充到对应文件中。 source资源文件夹，是存放用户资源的地方。除_posts文件夹之外，开头命名为_ (下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。暂时查看source文件夹下只有_post文件夹，是因为HEXO初始化时自动生成了一篇hello-world.md。具体如何创建新的博文、草稿、以及新的界面会在后续博文中再做介绍。 themes主题文件夹，HEXO会根据主题来生成静态文件，默认主题为landscape。 站点配置上文中已经有过介绍：_config.yml 为站点配置文件。可以在_config.yml中进行大部分的配置。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 关键词（暂时没发现有什么用处） author 作者名称 language 网站使用的语言（一般搭配主题中的语言来设置） timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。 这部分即网站的一些定制信息，需要自己根据自身需求去完善。 网址 参数 描述 默认值 url 网址网址 root 网址根目录 / permalink 文章的永久链接格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 这部分主要为网址路劲配置，主要修改URL即可。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容 source public_dir 公共文件夹，这个文件夹用来存放生成的站点文件 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染您可使用glob表达式来匹配路径。 这部分为HEXO自动生成文件后的目录情况，基本不需要做任何修改，保持默认值即可。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为(1)小写或(2)大写 0 render_drafts 显示草稿 false post_asset_folder 启动Asset文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 这部分主要对博文中的部分信息进行配置，基本不需要做任何修改，保持默认即可。 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 category_map以及tag_map配置为名称-路径的这种K-V形式，以category_map最为示例：category_map:&nbsp;&nbsp;&nbsp;&nbsp;分类1:category1&nbsp;&nbsp;&nbsp;&nbsp;分类2:category2 日期 / 时间格式 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss Hexo使用Moment.js来解析和显示时间。这部分基本上不需要修改，保持默认即可。 分页 参数 描述 默认值 per_page 每页显示的文章量(0 = 关闭分页功能) 10 pagination_dir 分页目录 page 这部分很好理解，根据个人喜好进行配置就好。 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置 主题和部署会在后续博文中再做介绍。 自定义博客已经大致了解过站点的相关配置，接下来简单修改下配置，看看效果。 修改配置简单修改_config.yml中的关于网站部分的配置，修改如下：1234567title: hulyangsubtitle: hulyang&apos;s blogdescription: hulyang blog desc keywords:author: hulyanglanguage:timezone: 启动服务配置修改并保存成功以后，执行以下指令，启动服务：123hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)。hexo generate // 自动生成静态文件hexo server //启动服务 统一访问http://127.0.0.1:4000来看看效果如何： 配置生效，标题等与刚刚的配置相符]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO搭建博客初体验]]></title>
    <url>%2Fhexo%2FHEXO%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[本文主要参考HEXO官方文档进行撰写，记录自己的建站过程，以供自己或他人在建站的作为简单参考。HEXO官网地址: https://hexo.io/ HEXO的安装环境准备安装HEXO前，必须确保安装机器上已经安装Git以及Node.js。如未安装，以下是对应的官网地址： Git: https://git-scm.com/ Node.js: https://nodejs.org/ 安装HEXO安装环境准备完毕后就可以直接通过npm来安装HEXO了： 1npm install -g hexo-cli 建站初始化建站目录HEXO安装完毕后，确定好建站目录，执行以下指令，自动初始化建站目录 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 执行完毕后，建站目录会自定生成HEXO的目录结构，如下： 12345678.├── _config.yml // 站点配置文件├── package.json // 应用程序的信息├── scaffolds // 模板文件夹├── source // 资源文件夹| ├── _drafts // 草稿| └── _posts // 博文└── themes // 主题文件夹 在这通过注释的方式对各文件|文件夹进行了简单介绍，后续博文中会做进一步介绍。 自动生成静态文件建站目录初始化完成以后，再执行generate指令 1hexo generate 自动生成博客所需的静态文件（HTML、JS、CSS等） 启动服务静态文件生成以后，最后执行server指令 1hexo server 即可启动服务，通过http://127.0.0.1:4000/即可访问自己的博客，访问的效果图如下：]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
</search>
